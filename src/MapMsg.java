
import java.net.DatagramPacket;
import java.net.DatagramSocket;

/* CS3283/CS3284 Project
 * 
 * TinyOs
 * 
 */

/**
 * This class is automatically generated by mig. DO NOT EDIT THIS FILE.
 * This class implements a Java interface to the 'MapMsg'
 * message type.
 */

public class MapMsg extends net.tinyos.message.Message {

    /** The default size of this message type in bytes. */
    public static final int DEFAULT_MESSAGE_SIZE = 4;

    /** The Active Message type associated with this message. */
    public static final int AM_TYPE = 6;

    /** Create a new MapMsg of size 4. */
    public MapMsg() {
        super(DEFAULT_MESSAGE_SIZE);
        amTypeSet(AM_TYPE);
    }

    /** Create a new MapMsg of the given data_length. */
    public MapMsg(int data_length) {
        super(data_length);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new MapMsg with the given data_length
     * and base offset.
     */
    public MapMsg(int data_length, int base_offset) {
        super(data_length, base_offset);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new MapMsg using the given byte array
     * as backing store.
     */
    public MapMsg(byte[] data) {
        super(data);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new MapMsg using the given byte array
     * as backing store, with the given base offset.
     */
    public MapMsg(byte[] data, int base_offset) {
        super(data, base_offset);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new MapMsg using the given byte array
     * as backing store, with the given base offset and data length.
     */
    public MapMsg(byte[] data, int base_offset, int data_length) {
        super(data, base_offset, data_length);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new MapMsg embedded in the given message
     * at the given base offset.
     */
    public MapMsg(net.tinyos.message.Message msg, int base_offset) {
        super(msg, base_offset, DEFAULT_MESSAGE_SIZE);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new MapMsg embedded in the given message
     * at the given base offset and length.
     */
    public MapMsg(net.tinyos.message.Message msg, int base_offset, int data_length) {
        super(msg, base_offset, data_length);
        amTypeSet(AM_TYPE);
    }

    /**
    /* Return a String representation of this message. Includes the
     * message type name and the non-indexed field values.
     */
    public String toString() {
      String s = "Message <MapMsg> \n";
      try {
        s += "  [location_id=0x"+Long.toHexString(get_location_id())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [player_id=0x"+Long.toHexString(get_player_id())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      return s;
    }

    // Message-type-specific access methods appear below.

    /////////////////////////////////////////////////////////
    // Accessor methods for field: location_id
    //   Field type: int, unsigned
    //   Offset (bits): 0
    //   Size (bits): 16
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'location_id' is signed (false).
     */
    public static boolean isSigned_location_id() {
        return false;
    }

    /**
     * Return whether the field 'location_id' is an array (false).
     */
    public static boolean isArray_location_id() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'location_id'
     */
    public static int offset_location_id() {
        return (0 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'location_id'
     */
    public static int offsetBits_location_id() {
        return 0;
    }

    /**
     * Return the value (as a int) of the field 'location_id'
     */
    public int get_location_id() {
        return (int)getUIntBEElement(offsetBits_location_id(), 16);
    }

    /**
     * Set the value of the field 'location_id'
     */
    public void set_location_id(int value) {
        setUIntBEElement(offsetBits_location_id(), 16, value);
    }

    /**
     * Return the size, in bytes, of the field 'location_id'
     */
    public static int size_location_id() {
        return (16 / 8);
    }

    /**
     * Return the size, in bits, of the field 'location_id'
     */
    public static int sizeBits_location_id() {
        return 16;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: player_id
    //   Field type: int, unsigned
    //   Offset (bits): 16
    //   Size (bits): 16
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'player_id' is signed (false).
     */
    public static boolean isSigned_player_id() {
        return false;
    }

    /**
     * Return whether the field 'player_id' is an array (false).
     */
    public static boolean isArray_player_id() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'player_id'
     */
    public static int offset_player_id() {
        return (16 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'player_id'
     */
    public static int offsetBits_player_id() {
        return 16;
    }

    /**
     * Return the value (as a int) of the field 'player_id'
     */
    public int get_player_id() {
        return (int)getUIntBEElement(offsetBits_player_id(), 16);
    }

    /**
     * Set the value of the field 'player_id'
     */
    public void set_player_id(int value) {
        setUIntBEElement(offsetBits_player_id(), 16, value);
    }

    public static void main(String[] args) throws Exception {
	
		System.out.println("Game Server starting up... [GamerServer.java]");
		
		/* *** Initialization *** */
		String reply = ""; // stores the reply info
		EventHandler events = new EventHandler();
	
		//use DatagramSocket for UDP connection
		@SuppressWarnings("resource")
		DatagramSocket socket = new DatagramSocket(9001);
		byte[] incomingBuffer = new byte[1000];
	
		// Constantly receiving incoming packets
		while (true)
		{
			DatagramPacket incomingPacket = new DatagramPacket(incomingBuffer, incomingBuffer.length); 
	
			socket.receive(incomingPacket);
	
			// convert content of packet into a string 
			String request = new String(incomingPacket.getData(), 0, incomingPacket.getLength() );
	
			/* ----------------------------------------------------- */
			// pass client request to event handler to compute results
			
			reply = events.computeEventsReply(request);
			
			/* ----------------------------------------------------- */
			
			// convert reply into array of bytes (output buffer)
			byte[] outputBuffer = new byte[1000];
			outputBuffer = reply.getBytes();
	
			// create reply packet using output buffer.
			// Note: destination address/port is retrieved from incomingPacket
			DatagramPacket outPacket = new DatagramPacket(outputBuffer, outputBuffer.length, incomingPacket.getAddress(), incomingPacket.getPort());
	
			// finally, send the packet
			socket.send(outPacket);
			System.out.println("Sent reply: " + reply + " [GamerServer.java]");
		}
	
	}

	/**
     * Return the size, in bytes, of the field 'player_id'
     */
    public static int size_player_id() {
        return (16 / 8);
    }

    /**
     * Return the size, in bits, of the field 'player_id'
     */
    public static int sizeBits_player_id() {
        return 16;
    }

}
